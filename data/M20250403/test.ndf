// 1. 基础值类型
Bool1 IS True
Int1 IS 100
Float1 IS 3.14
String1 IS 'test'
Hex1 IS 0xFF
Id1 IS GUID:{123-456}

// 2. 复合数据类型
Vec2 IS float2[1.0, 2.0]
Vec3 IS float3[1.0, 2.0, 3.0]
List1 IS [1, 2, 3]
Pair1 IS ('key', 100)
Map1 IS MAP[('a', 1), ('b', 2)]
Color1 IS RGBA[255, 0, 0, 255]

// 3. 边界情况
Nil1 IS nil
Empty1 IS []
Empty2 IS MAP[]
Unicode1 IS '测试'

// 4. 算术表达式
Math1 IS 1 + 2
Math2 IS (10 + 5) * 2
Math3 IS ~/test/path + 50
Math4 IS 15 div 3

// 5. 路径引用
Ref1 IS ~/test/path
Ref2 IS $/system/value
Ref3 IS ~/test/path | ~/system/value

// 6. 对象系统
Obj1 IS TBaseObject(
    name = "test",
    value = 100
)

Obj2 IS TParentObject(
    child = TChildObject(
        name = "child",
        value = 200
    ),
    count = 1
)

// 7. 修饰符
export Val1 IS 100
private Val2 IS 200
unnamed ~/test/path

// 8. 类型标注
Val1:int IS 100
List1:list<int> IS [1, 2, 3]
Map1:map<string,int> IS MAP[('a', 1)]
Obj1:TBaseObject IS TBaseObject(value = 100)

// 9. 模板系统
template Simple[T: int = 1] is TBaseObject(
    value = <T>
)

template Complex[
    T: int = 1,
    S: string = "test"
] is TBaseObject(
    value = <T>,
    name = <S>
)

template Simple[
    T1:int = 1,         
    T2:list<int>,       
    T3 = 100,           
    T4                  
] is TBaseObject(
    value = <T4>
)

// 10. 混合特性
export ComplexObj:TComplexObject IS TComplexObject(
    value = 100,
    array = [1, 2, 3],
)

Result IS (~/test/path + 50.0) * 2.0

template NestedTemplate[
    T: int = 1,
    S: string = "test"
] is TBaseTemplate(
    value = <T>,
    child = TChildTemplate(
        name = <S>,
    )
)