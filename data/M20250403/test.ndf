//=============================================
// 1. 基类定义
//=============================================
// 1.1 效果基类
export BaseEffect is TBaseEffectDescriptor(
    Name = "Base Effect",
    Duration = 0.0,
    IsEnabled = True
)

// 1.2 伤害效果
export BurnEffect is TDamageEffectDescriptor(
    Name = "Burn Effect",
    Duration = 5.0,
    DamagePerSecond = 10.0,
    EffectType = "DOT"
)

// 1.3 武器基类
export BaseWeapon is TBaseWeaponDescriptor(
    Name = "Base Weapon",
    Damage = 0.0,
    Range = 1000.0,
    Effects = []
)

//=============================================
// 2. 基本类型测试
//=============================================
// 2.1 布尔值
Bool_True IS True
Bool_False IS False

// 2.2 字符串
String_Single IS 'single quote string'
String_Double IS "double quote string"

// 2.3 数值
Int_Normal IS 100
Int_Negative IS -50
Int_Hex IS 0xFF
Float_Normal IS 3.14
Float_Negative IS -2.718

// 2.4 特殊类型
Guid_Value IS GUID:{12345678-1234-5678-1234-567812345678}
Rgba_Value IS RGBA[255, 128, 64, 255]
Nil_Value IS nil

//=============================================
// 3. 复合类型测试
//=============================================
// 3.1 向量测试
Vector_Empty IS []
Vector_Numbers IS [1, 2, 3, 4, 5]
Vector_Mixed IS [1, "string", True, 3.14]
Vector_Nested IS [[1,2], [3,4], [5,6]]

// 3.2 键值对测试
Pair_Numbers IS (1, 2)
Pair_Mixed IS ("key", 100)
Pair_Complex IS ((1,2), [3,4])

// 3.3 映射测试
Map_Empty IS MAP[]
Map_Simple IS MAP[
    ("key1", 100),
    ("key2", 200),
    ("key3", 300)
]
Map_Complex IS MAP[
    ("numbers", [1,2,3]),
    ("pairs", (4,5)),
    ("nested", MAP[("a",1), ("b",2)])
]

//=============================================
// 4. 对象类型测试
//=============================================
// 4.1 简单对象
export SimpleObject is TSimpleDescriptor(
    Name = "Simple Object",
    Value = 100
)

// 4.2 嵌套对象
private ComplexObject is TComplexDescriptor(
    StringValue = "test string",
    NumberValue = 42,
    VectorValue = [1,2,3],
    SubObject = TSubDescriptor(
        Name = "Sub Object",
        Enabled = True
    )
)

//=============================================
// 5. 对象实例测试
//=============================================
// 5.1 简单对象
export StandardCannon is TBaseWeaponDescriptor(
    Name = "Standard Cannon",
    Damage = 100.0,
    Range = 2000.0,
    Effects = [~/BurnEffect]
)

// 5.2 嵌套对象
private AdvancedCannon is TBaseWeaponDescriptor(
    Name = "Advanced Cannon",
    Damage = 150.0,
    Range = 2500.0,
    Effects = [
        ~/BurnEffect,
        TStunEffectDescriptor(
            Name = "Stun Effect",
            Duration = 3.0,
            StunTime = 2.0
        )
    ]
)

//=============================================
// 6. 模板和引用测试
//=============================================
// 6.1 模板定义
template TestTemplate
[
    TBaseDescriptor(Attribute = 'base'),
    TObjectDescriptor(
        Name = "Template Object",
        Value = 100,
        SubValues = [1,2,3]
    )
]

template CannonTemplate
[
    WeaponName : string = "",
    BaseDamage : float = 100.0,
    BaseRange : float = 1000.0,
    EffectList : LIST<TBaseEffectDescriptor> = []
]
is TBaseWeaponDescriptor
(
    Name = <WeaponName>
    Damage = <BaseDamage>
    Range = <BaseRange>
    Effects = <EffectList>
)

// 6.2 模板应用
TestCannon is CannonTemplate
[
    WeaponName = "Test Cannon",
    BaseDamage = 120.0,
    BaseRange = 1500.0,
    EffectList = [~/BurnEffect]
]

// 6.3 引用测试
Reference_Single is ~/ComplexObject
Reference_Multiple is ~/SimpleObject | ~/ComplexObject

StandardWeapon is ~/StandardCannon
WeaponPair is ~/StandardCannon | ~/AdvancedCannon

//=============================================
// 7. 替换值测试
//=============================================
Replace_Value is @Value
Replace_Complex is TReplaceDescriptor(
    Name = @Name,
    Value = @DefaultValue,
    List = @DefaultList
)

//=============================================
// 8. 算术表达式测试
//=============================================
// 8.1 基础运算
Math_Add IS 1 + 2
Math_Sub IS 10 - 5
Math_Mul IS 3 * 4
Math_Div IS 15 div 3

// 8.2 复杂表达式
Math_Complex IS (10 + 5) * (20 - 15) div 3
Math_Negative IS -(5 + 3)

